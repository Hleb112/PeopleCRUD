openapi: 3.0.0
info:
  title: People CRUD API
  description: API для управления людьми, их email-адресами и друзьями
  version: 1.0.0
servers:
  - url: /api/v1
    description: Основной сервер API

tags:
  - name: people
    description: Операции с людьми
  - name: emails
    description: Управление email-адресами
  - name: friends
    description: Управление друзьями

paths:
  /people:
    post:
      tags: [people]
      summary: Создать нового человека
      description: Создает новую запись о человеке с возможностью добавления email-адресов
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePersonRequest'
      responses:
        '201':
          description: Человек успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonWithDetails'
        '400':
          description: Неверные входные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [people]
      summary: Получить список людей
      description: Возвращает список людей с пагинацией
      parameters:
        - name: limit
          in: query
          description: Количество записей на странице
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          description: Смещение
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PersonWithDetails'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /people/{id}:
    get:
      tags: [people]
      summary: Получить информацию о человеке
      description: Возвращает полную информацию о человеке по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonWithDetails'
        '400':
          description: Неверный ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Человек не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [people]
      summary: Обновить информацию о человеке
      description: Обновляет информацию о существующем человеке
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePersonRequest'
      responses:
        '200':
          description: Информация успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonWithDetails'
        '400':
          description: Неверные входные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Человек не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [people]
      summary: Удалить человека
      description: Удаляет запись о человеке по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Человек успешно удален
        '400':
          description: Неверный ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Человек не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /people/{id}/emails:
    post:
      tags: [emails]
      summary: Добавить email для человека
      description: Добавляет email адрес для указанного человека
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddEmailRequest'
      responses:
        '201':
          description: Email успешно добавлен
        '400':
          description: Неверные входные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Человек не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /people/{id}/friends:
    get:
      tags: [friends]
      summary: Получить друзей человека
      description: Возвращает список друзей указанного человека
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '400':
          description: Неверный ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Человек не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Person:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
          nullable: true
        age:
          type: integer
          nullable: true
        gender:
          type: string
          nullable: true
        nationality:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PersonWithDetails:
      allOf:
        - $ref: '#/components/schemas/Person'
        - type: object
          properties:
            emails:
              type: array
              items:
                $ref: '#/components/schemas/Email'
            friends:
              type: array
              items:
                $ref: '#/components/schemas/Person'

    Email:
      type: object
      properties:
        id:
          type: integer
        person_id:
          type: integer
        email:
          type: string
        is_primary:
          type: boolean
        created_at:
          type: string
          format: date-time

    CreatePersonRequest:
      type: object
      required: [first_name, last_name]
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 100
        last_name:
          type: string
          minLength: 1
          maxLength: 100
        middle_name:
          type: string
          nullable: true
          maxLength: 100
        emails:
          type: array
          items:
            type: string
            format: email

    UpdatePersonRequest:
      type: object
      properties:
        first_name:
          type: string
          nullable: true
          minLength: 1
          maxLength: 100
        last_name:
          type: string
          nullable: true
          minLength: 1
          maxLength: 100
        middle_name:
          type: string
          nullable: true
          maxLength: 100
        age:
          type: integer
          nullable: true
          minimum: 1
          maximum: 150
        gender:
          type: string
          nullable: true
          enum: [male, female]
        nationality:
          type: string
          nullable: true
          minLength: 2
          maxLength: 2

    AddEmailRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email
        is_primary:
          type: boolean
          default: false

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        details:
          type: string
          nullable: true