openapi: 3.0.1
info:
  title: People API
  description: API для работы с людьми, их email и друзьями
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
    description: Локальный сервер разработки

paths:
  /health:
    get:
      summary: Проверка здоровья сервиса
      responses:
        '200':
          description: Сервис работает
          content:
            text/plain:
              example: "OK"

  /people:
    get:
      summary: Получение списка людей с пагинацией
      parameters:
        - name: limit
          in: query
          description: Количество записей на странице
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          description: Смещение (пропуск записей)
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Список людей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'

    post:
      summary: Создание нового человека
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonCreate'
            examples:
              valid:
                value:
                  first_name: "Иван"
                  last_name: "Иванов"
                  middle_name: "Иванович"
                  emails: ["ivan@example.com", "ivan.work@example.com"]
              invalid:
                value:
                  first_name: ""
                  last_name: "Иванов"
                  emails: ["invalid-email"]
      responses:
        '201':
          description: Человек успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Невалидные данные

  /people/lastname/{lastname}:
    get:
      summary: Поиск людей по фамилии
      parameters:
        - name: lastname
          in: path
          required: true
          schema:
            type: string
          example: "Иванов"
      responses:
        '200':
          description: Найденные люди
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'

  /people/{id}:
    get:
      summary: Получение информации о человеке по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Информация о человеке
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          description: Человек не найден

    put:
      summary: Обновление информации о человеке
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonUpdate'
            example:
              first_name: "Иван"
              last_name: "Петров"
              age: 30
              nationality: "RU"
      responses:
        '200':
          description: Информация успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          description: Человек не найден

    delete:
      summary: Удаление человека
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '204':
          description: Человек успешно удален
        '404':
          description: Человек не найден

  /people/{id}/emails:
    post:
      summary: Добавление email для человека
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailCreate'
            examples:
              valid:
                value:
                  email: "new.email@example.com"
                  is_primary: true
              invalid:
                value:
                  email: "invalid-email"
                  is_primary: true
      responses:
        '201':
          description: Email успешно добавлен
        '400':
          description: Невалидный email
        '404':
          description: Человек не найден

  /people/{id}/friends:
    get:
      summary: Получение списка друзей
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Список друзей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '404':
          description: Человек не найден

  /people/{id}/friends/{friendId}:
    post:
      summary: Добавление друга
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
        - name: friendId
          in: path
          required: true
          schema:
            type: integer
          example: 2
      responses:
        '201':
          description: Друг успешно добавлен
        '400':
          description: Нельзя добавить себя в друзья
        '404':
          description: Человек или друг не найден

    delete:
      summary: Удаление друга
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
        - name: friendId
          in: path
          required: true
          schema:
            type: integer
          example: 2
      responses:
        '204':
          description: Друг успешно удален
        '404':
          description: Человек или друг не найден

components:
  schemas:
    Person:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: "Иван"
        last_name:
          type: string
          example: "Иванов"
        middle_name:
          type: string
          example: "Иванович"
        age:
          type: integer
          example: 30
        nationality:
          type: string
          example: "RU"
        emails:
          type: array
          items:
            type: string
          example: ["ivan@example.com", "ivan.work@example.com"]
        friends:
          type: array
          items:
            $ref: '#/components/schemas/Person'

    PersonCreate:
      type: object
      required:
        - first_name
        - last_name
      properties:
        first_name:
          type: string
          example: "Иван"
        last_name:
          type: string
          example: "Иванов"
        middle_name:
          type: string
          example: "Иванович"
        emails:
          type: array
          items:
            type: string
          example: ["ivan@example.com", "ivan.work@example.com"]

    PersonUpdate:
      type: object
      properties:
        first_name:
          type: string
          example: "Иван"
        last_name:
          type: string
          example: "Петров"
        age:
          type: integer
          example: 30
        nationality:
          type: string
          example: "RU"

    EmailCreate:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "new.email@example.com"
        is_primary:
          type: boolean
          example: true